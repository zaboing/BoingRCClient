using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Web.Script.Serialization;
using System.Collections.ObjectModel;

namespace JSONEditor
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {

        public ObservableCollection<Command> Commands { get; set; }
        public ObservableCollection<Command> Aliases { get; set; }

        string cmdJson;
        string aliasJson;
        JavaScriptSerializer serializer;

        public MainWindow()
        {
            string[] args = Environment.GetCommandLineArgs();
            if (args.Length > 2)
            {
                cmdJson = args[1];
                aliasJson = args[2];
            }
            else
            {
                cmdJson = "cmds.json";
                aliasJson = "aliases.json";
            }
            serializer = new JavaScriptSerializer();
            string json = File.ReadAllText(cmdJson);
            Commands = CollectionFromMap(serializer.Deserialize<Dictionary<String, String>>(json));
            json = File.ReadAllText(aliasJson);
            Aliases = CollectionFromMap(serializer.Deserialize<Dictionary<String, String>>(json));
            InitializeComponent();
            Closing += MainWindow_Closing;
        }

        void MainWindow_Closing(object sender, System.ComponentModel.CancelEventArgs e)
        {
            CommandGrid.CommitEdit(DataGridEditingUnit.Row, true);
            AliasGrid.CommitEdit(DataGridEditingUnit.Row, true);
            string json = serializer.Serialize(MapFromCollection(Commands));
            File.WriteAllText(cmdJson, json);
            json = serializer.Serialize(MapFromCollection(Aliases));
            File.WriteAllText(aliasJson, json);
        }

        private void Add_Command_Click(object sender, RoutedEventArgs e)
        {
            Commands.Add(new Command("", ""));
        }

        private void Remove_Command_Click(object sender, RoutedEventArgs e)
        {
            var items = new List<Command>(CommandGrid.SelectedItems.Cast<Command>());
            foreach (var item in items)
            {
                Commands.Remove(item);
            }
        }

        private void Add_Alias_Click(object sender, RoutedEventArgs e)
        {
            Aliases.Add(new Command("", ""));
        }

        private void Remove_Alias_Click(object sender, RoutedEventArgs e)
        {
            var items = new List<Command>(AliasGrid.SelectedItems.Cast<Command>());
            foreach (var item in items)
            {
                Aliases.Remove(item);
            }
        }

        ObservableCollection<Command> CollectionFromMap(Dictionary<String, String> map)
        {
            ObservableCollection<Command> collection = new ObservableCollection<Command>();
            foreach (String key in map.Keys)
            {
                collection.Add(new Command(key, map[key]));
            }
            return collection;
        }

        Dictionary<String, String> MapFromCollection(ObservableCollection<Command> collection)
        {
            Dictionary<String, String> map = new Dictionary<string, string>();
            foreach (Command command in collection)
            {
                if (!map.ContainsKey(command.Key) && !string.IsNullOrWhiteSpace(command.Key))
                {
                    map.Add(command.Key, command.Value);
                }
            }
            return map;
        }

        private void CommandGrid_AutoGeneratedColumns(object sender, EventArgs e)
        {
            CommandGrid.Columns[0].Header = "Command";
            CommandGrid.Columns[1].Header = "Action";
        }

        private void AliasGrid_AutoGeneratedColumns(object sender, EventArgs e)
        {
            AliasGrid.Columns[0].Header = "Alias";
            AliasGrid.Columns[1].Header = "Command";
        }
    }
}
